import subprocess


def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """

    # Receive Input
    inputType = input("Add the file you want to read or keep it empty and input the variables: ")
    selectAttributes = ""
    groupingVarCount = ""
    groupingAttributes = ""
    fVect = ""
    predicates = ""
    havingCondition = ""

    if inputType != "":
        with open(inputType) as f:
            content = f.readlines()
        content = list(map(str.rstrip, content))
        i = 0

        headers = {
            "SELECT ATTRIBUTE(S)": "selectAttributes",
            "NUMBER OF GROUPING VARIABLES(n):": "groupingVarCount",
            "GROUPING ATTRIBUTES(V)": "groupingAttributes",
            "F-VECT([F])": "fVect",
            "SELECT CONDITION-VECT:": "predicates",
            "HAVING_CONDITION(G):": "havingCondition"
         }
        
        if i < len(content):
            line = content[i]
            i += 1

        if line in headers:
            var_name = headers[line]
            value = content[i].replace(" ", " ") if var_name != "predicates" else content[i]
            globals()[var_name] = value
        else:
            predicates += "," + content[i] if "predicates" in globals() else content[i]
        i += 1

        # Assign extracted values
        selectAttributes = data.get("select_attribute_s", "")
        groupingVarCount = data.get("number_of_grouping_variables_n", "")
        groupingAttributes = data.get("grouping_attributes_v", "")
        fVect = data.get("f_vect_f", "")
        predicates = data.get("select_condition_vect", predicates)
        havingCondition = data.get("having_condition_g", "")

    
    
    
    body = """
    for row in cur:
        if row['quant'] > 10:
            _global.append(row)
    """

    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
